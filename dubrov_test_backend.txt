>Как избежать утечек памяти при работе с сервисом?

Постоянно мониторить потребление памяти сервисом.
Например, при помощи Prometheus или Zabbix.

Вообще, для питона проблема утечки памяти не так актуальна,
как например для С. Утечки памяти в питоне как правило
возникают при кешировании или буфферизациии результатов
работы программы без своевременной очистки. Например:

cache = {}

def make_expansive_call(params)
    if params not in cache:
        cache[params] = do_call(params)
    return cache[params]

В таких случаях стоит использовать functools.lru_cache.

Также к утечкам памяти (и другим проблемам) может
привести неправильное использование ресурсов:

handle = resource.open()
handle.do_staff_with()
handle.close()

При вызове do_staff_with может возникнуть исключение и ресурс
никогда не будет закрыт. Правильным в данном случае будет
использование менеджера ресурсов with.

Еще одним источником утечек может быть использование С-extension.
Тут в виду ручного управления памятью простор для ошибок просто
бесконечный, и каждый сможет найти способ скушать всю память или
получить сегфолт себе по душе.

>Какие могут быть ограничения во время работы сервиса?

Первое и наиболее вероятное -- это лимит запросов к openweathermap.org.
Следует планировать работу с сервисом таким образом, чтобы оставаться
в пределах максимального количества запросов в минуту / в месяц,
предоставляемого openweathermap.

Также, очевидно, для работы сервиса на сервере должен быть доступ в интернет,
выставлена актуальная дата и актуальные версии CA сертификатов.

>Каким образом можно создать мониторинг для сервиса?

Добавить эндпоинт /healthcheck, который выполняет простой запрос
к вышестоящему апи для проверки доступности

>Если мы хотим заставить работать сервис на удаленном сервере,
какие решения вы можете предложить? А сможете ли реализовать свои предложения?

Упаковать в контейнер и добавить логирование запросов.
Контейнер упростит развертывание и мониторинг сервиса,
а также поможет с управлением зависимостями.
Докерфайл добавлен в проект.
